//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.09.30 at 06:15:10 PM PDT 
//


package org.hl7.knowledgeartifact.r1;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for RangeConstraintType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="RangeConstraintType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="Minimum"/>
 *     &lt;enumeration value="Maximum"/>
 *     &lt;enumeration value="List"/>
 *     &lt;enumeration value="Component"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "RangeConstraintType")
@XmlEnum
public enum RangeConstraintType {


    /**
     * The constraint specifies the lower bound or minimum value of a documentation item value. This constraint type applies to quantitative value types only.
     * 
     */
    @XmlEnumValue("Minimum")
    MINIMUM("Minimum"),

    /**
     * The constraint specifies the upper bound or minimum value of a documentation item value. This constraint type applies to quantitative value types only.
     * 
     */
    @XmlEnumValue("Maximum")
    MAXIMUM("Maximum"),

    /**
     * The constraint restricts the value to items from a list.
     * 
     */
    @XmlEnumValue("List")
    LIST("List"),
    @XmlEnumValue("Component")
    COMPONENT("Component");
    private final String value;

    RangeConstraintType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static RangeConstraintType fromValue(String v) {
        for (RangeConstraintType c: RangeConstraintType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
