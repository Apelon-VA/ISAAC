//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.09.26 at 04:34:23 PM PDT 
//

package org.hl7.knowledgeartifact.r1;

import javax.xml.bind.annotation.XmlRegistry;

/**
 * This object contains factory methods for each Java content interface and Java
 * element interface generated in the org.hl7.knowledgeartifact.r1 package.
 * <p>
 * An ObjectFactory allows you to programatically construct new instances of the
 * Java representation for XML content. The Java representation of XML content
 * can consist of schema derived interfaces and classes representing the binding
 * of schema type definitions, element declarations and model groups. Factory
 * methods for each of these are provided in this class.
 * 
 */
@XmlRegistry
public class ObjectFactory {

  /**
   * Create a new ObjectFactory that can be used to create new instances of
   * schema derived classes for package: org.hl7.knowledgeartifact.r1
   * 
   */
  public ObjectFactory() {
  }

  /**
   * Create an instance of {@link AllTrue }
   * 
   */
  public AllTrue createAllTrue() {
    return new AllTrue();
  }

  /**
   * Create an instance of {@link AnyTrue }
   * 
   */
  public AnyTrue createAnyTrue() {
    return new AnyTrue();
  }

  /**
   * Create an instance of {@link GreaterOrEqual }
   * 
   */
  public GreaterOrEqual createGreaterOrEqual() {
    return new GreaterOrEqual();
  }

  /**
   * Create an instance of {@link ExpressionDef }
   * 
   */
  public ExpressionDef createExpressionDef() {
    return new ExpressionDef();
  }

  /**
   * Create an instance of {@link IncludedIn }
   * 
   */
  public IncludedIn createIncludedIn() {
    return new IncludedIn();
  }

  /**
   * Create an instance of {@link Before }
   * 
   */
  public Before createBefore() {
    return new Before();
  }

  /**
   * Create an instance of {@link Property }
   * 
   */
  public Property createProperty() {
    return new Property();
  }

  /**
   * Create an instance of {@link First }
   * 
   */
  public First createFirst() {
    return new First();
  }

  /**
   * Create an instance of {@link After }
   * 
   */
  public After createAfter() {
    return new After();
  }

  /**
   * Create an instance of {@link Convert }
   * 
   */
  public Convert createConvert() {
    return new Convert();
  }

  /**
   * Create an instance of {@link Overlaps }
   * 
   */
  public Overlaps createOverlaps() {
    return new Overlaps();
  }

  /**
   * Create an instance of {@link Date }
   * 
   */
  public Date createDate() {
    return new Date();
  }

  /**
   * Create an instance of {@link Modulo }
   * 
   */
  public Modulo createModulo() {
    return new Modulo();
  }

  /**
   * Create an instance of {@link Distinct }
   * 
   */
  public Distinct createDistinct() {
    return new Distinct();
  }

  /**
   * Create an instance of {@link Negate }
   * 
   */
  public Negate createNegate() {
    return new Negate();
  }

  /**
   * Create an instance of {@link Coalesce }
   * 
   */
  public Coalesce createCoalesce() {
    return new Coalesce();
  }

  /**
   * Create an instance of {@link DateOf }
   * 
   */
  public DateOf createDateOf() {
    return new DateOf();
  }

  /**
   * Create an instance of {@link ForEach }
   * 
   */
  public ForEach createForEach() {
    return new ForEach();
  }

  /**
   * Create an instance of {@link Union }
   * 
   */
  public Union createUnion() {
    return new Union();
  }

  /**
   * Create an instance of {@link Ln }
   * 
   */
  public Ln createLn() {
    return new Ln();
  }

  /**
   * Create an instance of {@link Mode }
   * 
   */
  public Mode createMode() {
    return new Mode();
  }

  /**
   * Create an instance of {@link IsNotEmpty }
   * 
   */
  public IsNotEmpty createIsNotEmpty() {
    return new IsNotEmpty();
  }

  /**
   * Create an instance of {@link OverlapsAfter }
   * 
   */
  public OverlapsAfter createOverlapsAfter() {
    return new OverlapsAfter();
  }

  /**
   * Create an instance of {@link Succ }
   * 
   */
  public Succ createSucc() {
    return new Succ();
  }

  /**
   * Create an instance of {@link Filter }
   * 
   */
  public Filter createFilter() {
    return new Filter();
  }

  /**
   * Create an instance of {@link DatePart }
   * 
   */
  public DatePart createDatePart() {
    return new DatePart();
  }

  /**
   * Create an instance of {@link ProperIncludedIn }
   * 
   */
  public ProperIncludedIn createProperIncludedIn() {
    return new ProperIncludedIn();
  }

  /**
   * Create an instance of {@link Null }
   * 
   */
  public Null createNull() {
    return new Null();
  }

  /**
   * Create an instance of {@link Conditional }
   * 
   */
  public Conditional createConditional() {
    return new Conditional();
  }

  /**
   * Create an instance of {@link MinValue }
   * 
   */
  public MinValue createMinValue() {
    return new MinValue();
  }

  /**
   * Create an instance of {@link Interval }
   * 
   */
  public Interval createInterval() {
    return new Interval();
  }

  /**
   * Create an instance of {@link LessOrEqual }
   * 
   */
  public LessOrEqual createLessOrEqual() {
    return new LessOrEqual();
  }

  /**
   * Create an instance of {@link IsNull }
   * 
   */
  public IsNull createIsNull() {
    return new IsNull();
  }

  /**
   * Create an instance of {@link Abs }
   * 
   */
  public Abs createAbs() {
    return new Abs();
  }

  /**
   * Create an instance of {@link ParameterDef }
   * 
   */
  public ParameterDef createParameterDef() {
    return new ParameterDef();
  }

  /**
   * Create an instance of {@link Pred }
   * 
   */
  public Pred createPred() {
    return new Pred();
  }

  /**
   * Create an instance of {@link MaxValue }
   * 
   */
  public MaxValue createMaxValue() {
    return new MaxValue();
  }

  /**
   * Create an instance of {@link Triggers }
   * 
   */
  public Triggers createTriggers() {
    return new Triggers();
  }

  /**
   * Create an instance of {@link Ends }
   * 
   */
  public Ends createEnds() {
    return new Ends();
  }

  /**
   * Create an instance of {@link NotEqual }
   * 
   */
  public NotEqual createNotEqual() {
    return new NotEqual();
  }

  /**
   * Create an instance of {@link PropertyExpression }
   * 
   */
  public PropertyExpression createPropertyExpression() {
    return new PropertyExpression();
  }

  /**
   * Create an instance of {@link Equal }
   * 
   */
  public Equal createEqual() {
    return new Equal();
  }

  /**
   * Create an instance of {@link ObjectExpression }
   * 
   */
  public ObjectExpression createObjectExpression() {
    return new ObjectExpression();
  }

  /**
   * Create an instance of {@link Combine }
   * 
   */
  public Combine createCombine() {
    return new Combine();
  }

  /**
   * Create an instance of {@link Truncate }
   * 
   */
  public Truncate createTruncate() {
    return new Truncate();
  }

  /**
   * Create an instance of {@link Ceiling }
   * 
   */
  public Ceiling createCeiling() {
    return new Ceiling();
  }

  /**
   * Create an instance of {@link ObjectRedefine }
   * 
   */
  public ObjectRedefine createObjectRedefine() {
    return new ObjectRedefine();
  }

  /**
   * Create an instance of {@link IsEmpty }
   * 
   */
  public IsEmpty createIsEmpty() {
    return new IsEmpty();
  }

  /**
   * Create an instance of {@link Intersect }
   * 
   */
  public Intersect createIntersect() {
    return new Intersect();
  }

  /**
   * Create an instance of {@link Median }
   * 
   */
  public Median createMedian() {
    return new Median();
  }

  /**
   * Create an instance of {@link Split }
   * 
   */
  public Split createSplit() {
    return new Split();
  }

  /**
   * Create an instance of {@link Difference }
   * 
   */
  public Difference createDifference() {
    return new Difference();
  }

  /**
   * Create an instance of {@link Length }
   * 
   */
  public Length createLength() {
    return new Length();
  }

  /**
   * Create an instance of {@link Greater }
   * 
   */
  public Greater createGreater() {
    return new Greater();
  }

  /**
   * Create an instance of {@link End }
   * 
   */
  public End createEnd() {
    return new End();
  }

  /**
   * Create an instance of {@link Avg }
   * 
   */
  public Avg createAvg() {
    return new Avg();
  }

  /**
   * Create an instance of {@link Indexer }
   * 
   */
  public Indexer createIndexer() {
    return new Indexer();
  }

  /**
   * Create an instance of {@link TimeOf }
   * 
   */
  public TimeOf createTimeOf() {
    return new TimeOf();
  }

  /**
   * Create an instance of {@link Case }
   * 
   */
  public Case createCase() {
    return new Case();
  }

  /**
   * Create an instance of {@link Add }
   * 
   */
  public Add createAdd() {
    return new Add();
  }

  /**
   * Create an instance of {@link Begin }
   * 
   */
  public Begin createBegin() {
    return new Begin();
  }

  /**
   * Create an instance of {@link ParameterRef }
   * 
   */
  public ParameterRef createParameterRef() {
    return new ParameterRef();
  }

  /**
   * Create an instance of {@link Min }
   * 
   */
  public Min createMin() {
    return new Min();
  }

  /**
   * Create an instance of {@link Current }
   * 
   */
  public Current createCurrent() {
    return new Current();
  }

  /**
   * Create an instance of {@link Sort }
   * 
   */
  public Sort createSort() {
    return new Sort();
  }

  /**
   * Create an instance of {@link StdDev }
   * 
   */
  public StdDev createStdDev() {
    return new StdDev();
  }

  /**
   * Create an instance of {@link Literal }
   * 
   */
  public Literal createLiteral() {
    return new Literal();
  }

  /**
   * Create an instance of {@link Lower }
   * 
   */
  public Lower createLower() {
    return new Lower();
  }

  /**
   * Create an instance of {@link Power }
   * 
   */
  public Power createPower() {
    return new Power();
  }

  /**
   * Create an instance of {@link Collapse }
   * 
   */
  public Collapse createCollapse() {
    return new Collapse();
  }

  /**
   * Create an instance of {@link Less }
   * 
   */
  public Less createLess() {
    return new Less();
  }

  /**
   * Create an instance of {@link TruncatedDivide }
   * 
   */
  public TruncatedDivide createTruncatedDivide() {
    return new TruncatedDivide();
  }

  /**
   * Create an instance of {@link Floor }
   * 
   */
  public Floor createFloor() {
    return new Floor();
  }

  /**
   * Create an instance of {@link Last }
   * 
   */
  public Last createLast() {
    return new Last();
  }

  /**
   * Create an instance of {@link DateDiff }
   * 
   */
  public DateDiff createDateDiff() {
    return new DateDiff();
  }

  /**
   * Create an instance of {@link Today }
   * 
   */
  public Today createToday() {
    return new Today();
  }

  /**
   * Create an instance of {@link Or }
   * 
   */
  public Or createOr() {
    return new Or();
  }

  /**
   * Create an instance of {@link ExpressionRef }
   * 
   */
  public ExpressionRef createExpressionRef() {
    return new ExpressionRef();
  }

  /**
   * Create an instance of {@link And }
   * 
   */
  public And createAnd() {
    return new And();
  }

  /**
   * Create an instance of {@link CaseItem }
   * 
   */
  public CaseItem createCaseItem() {
    return new CaseItem();
  }

  /**
   * Create an instance of {@link Meets }
   * 
   */
  public Meets createMeets() {
    return new Meets();
  }

  /**
   * Create an instance of {@link TernaryExpression }
   * 
   */
  public TernaryExpression createTernaryExpression() {
    return new TernaryExpression();
  }

  /**
   * Create an instance of {@link Count }
   * 
   */
  public Count createCount() {
    return new Count();
  }

  /**
   * Create an instance of {@link In }
   * 
   */
  public In createIn() {
    return new In();
  }

  /**
   * Create an instance of {@link Variance }
   * 
   */
  public Variance createVariance() {
    return new Variance();
  }

  /**
   * Create an instance of {@link As }
   * 
   */
  public As createAs() {
    return new As();
  }

  /**
   * Create an instance of {@link Upper }
   * 
   */
  public Upper createUpper() {
    return new Upper();
  }

  /**
   * Create an instance of {@link Subtract }
   * 
   */
  public Subtract createSubtract() {
    return new Subtract();
  }

  /**
   * Create an instance of {@link Concat }
   * 
   */
  public Concat createConcat() {
    return new Concat();
  }

  /**
   * Create an instance of {@link Contains }
   * 
   */
  public Contains createContains() {
    return new Contains();
  }

  /**
   * Create an instance of {@link Is }
   * 
   */
  public Is createIs() {
    return new Is();
  }

  /**
   * Create an instance of {@link Trigger }
   * 
   */
  public Trigger createTrigger() {
    return new Trigger();
  }

  /**
   * Create an instance of {@link ProperIncludes }
   * 
   */
  public ProperIncludes createProperIncludes() {
    return new ProperIncludes();
  }

  /**
   * Create an instance of {@link Multiply }
   * 
   */
  public Multiply createMultiply() {
    return new Multiply();
  }

  /**
   * Create an instance of {@link ObjectDescriptor }
   * 
   */
  public ObjectDescriptor createObjectDescriptor() {
    return new ObjectDescriptor();
  }

  /**
   * Create an instance of {@link Sum }
   * 
   */
  public Sum createSum() {
    return new Sum();
  }

  /**
   * Create an instance of {@link Substring }
   * 
   */
  public Substring createSubstring() {
    return new Substring();
  }

  /**
   * Create an instance of {@link Includes }
   * 
   */
  public Includes createIncludes() {
    return new Includes();
  }

  /**
   * Create an instance of {@link Log }
   * 
   */
  public Log createLog() {
    return new Log();
  }

  /**
   * Create an instance of {@link Max }
   * 
   */
  public Max createMax() {
    return new Max();
  }

  /**
   * Create an instance of {@link Divide }
   * 
   */
  public Divide createDivide() {
    return new Divide();
  }

  /**
   * Create an instance of {@link List }
   * 
   */
  public List createList() {
    return new List();
  }

  /**
   * Create an instance of {@link BinaryExpression }
   * 
   */
  public BinaryExpression createBinaryExpression() {
    return new BinaryExpression();
  }

  /**
   * Create an instance of {@link PopulationVariance }
   * 
   */
  public PopulationVariance createPopulationVariance() {
    return new PopulationVariance();
  }

  /**
   * Create an instance of {@link OverlapsBefore }
   * 
   */
  public OverlapsBefore createOverlapsBefore() {
    return new OverlapsBefore();
  }

  /**
   * Create an instance of {@link Round }
   * 
   */
  public Round createRound() {
    return new Round();
  }

  /**
   * Create an instance of {@link ComplexLiteral }
   * 
   */
  public ComplexLiteral createComplexLiteral() {
    return new ComplexLiteral();
  }

  /**
   * Create an instance of {@link IndexOf }
   * 
   */
  public IndexOf createIndexOf() {
    return new IndexOf();
  }

  /**
   * Create an instance of {@link Now }
   * 
   */
  public Now createNow() {
    return new Now();
  }

  /**
   * Create an instance of {@link Not }
   * 
   */
  public Not createNot() {
    return new Not();
  }

  /**
   * Create an instance of {@link Pos }
   * 
   */
  public Pos createPos() {
    return new Pos();
  }

  /**
   * Create an instance of {@link IfNull }
   * 
   */
  public IfNull createIfNull() {
    return new IfNull();
  }

  /**
   * Create an instance of {@link Begins }
   * 
   */
  public Begins createBegins() {
    return new Begins();
  }

  /**
   * Create an instance of {@link PopulationStdDev }
   * 
   */
  public PopulationStdDev createPopulationStdDev() {
    return new PopulationStdDev();
  }

  /**
   * Create an instance of {@link DateAdd }
   * 
   */
  public DateAdd createDateAdd() {
    return new DateAdd();
  }

  /**
   * Create an instance of {@link Expand }
   * 
   */
  public Expand createExpand() {
    return new Expand();
  }

}
