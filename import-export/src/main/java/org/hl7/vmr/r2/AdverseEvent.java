//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.09.30 at 06:15:10 PM PDT 
//


package org.hl7.vmr.r2;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlType;
import org.hl7.cdsdt.r2.CD;


/**
 * Unfavorable healthcare event (e.g., death, rash, difficulty breathing, a fall, or an adverse surgical event) that may or may not have been caused by some agent (e.g., a medication, immunization, food, or environmental agent).
 * 
 * Use AdverseEvent to model adverse reaction. An adverse reaction is type of adverse event that is characterized by an undesired or unexpected negative reaction to an agent (generally a medication or a food item). 
 * 
 * An adverse reactions can range from a mild reaction, such as a harmless rash to a severe and life-threatening reaction. They can occur immediately or develop over time. For example, a patient may develop a rash after taking a particular medication. 
 * 
 * In the case of adverse reactions, if a given agent is thought to cause multiple reactions, these reactions should be represented using multiple adverse events. 
 * 
 * Note that allergies are represented as special types of conditions embodied in the AllergyOrIntolerance class, whereas individual adverse events are represented as adverse events.
 * 
 * Note that a problem resulting from adverse event should not be confused with the adverse event. A fall is an adverse event whereas the fracture resulting from the fall is a problem.  In general, as a rule of thumb, if something can naturally be represented as a problem, it should be represented as a problem.
 * 
 * Iatrogenic issues should generally be represented as both an adverse event and problem where feasible. For instance, hospital-acquired pneumonia, central-line infections, or deep-venous thrombosis occurring during a hospitalization.
 * 
 * In some cases, the iatrogenic event will be distinct from the resulting problem. For example, an inadvertent liver laceration during surgery is an adverse event whereas the resulting liver bleeding is the problem.
 * 
 * Note that 'Never-Events' are adverse events while the resulting condition from these events are problems.
 * 
 * <p>Java class for AdverseEvent complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="AdverseEvent">
 *   &lt;complexContent>
 *     &lt;extension base="{urn:hl7-org:vmr:r2}AdverseEventBase">
 *       &lt;sequence>
 *         &lt;element name="adverseEventStatus" type="{urn:hl7-org:cdsdt:r2}CD" minOccurs="0"/>
 *         &lt;element name="criticality" type="{urn:hl7-org:cdsdt:r2}CD" minOccurs="0"/>
 *         &lt;element name="severity" type="{urn:hl7-org:cdsdt:r2}CD" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/extension>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "AdverseEvent", propOrder = {
    "adverseEventStatus",
    "criticality",
    "severity"
})
public class AdverseEvent
    extends AdverseEventBase
{

    protected CD adverseEventStatus;
    protected CD criticality;
    protected CD severity;

    /**
     * Gets the value of the adverseEventStatus property.
     * 
     * @return
     *     possible object is
     *     {@link CD }
     *     
     */
    public CD getAdverseEventStatus() {
        return adverseEventStatus;
    }

    /**
     * Sets the value of the adverseEventStatus property.
     * 
     * @param value
     *     allowed object is
     *     {@link CD }
     *     
     */
    public void setAdverseEventStatus(CD value) {
        this.adverseEventStatus = value;
    }

    /**
     * Gets the value of the criticality property.
     * 
     * @return
     *     possible object is
     *     {@link CD }
     *     
     */
    public CD getCriticality() {
        return criticality;
    }

    /**
     * Sets the value of the criticality property.
     * 
     * @param value
     *     allowed object is
     *     {@link CD }
     *     
     */
    public void setCriticality(CD value) {
        this.criticality = value;
    }

    /**
     * Gets the value of the severity property.
     * 
     * @return
     *     possible object is
     *     {@link CD }
     *     
     */
    public CD getSeverity() {
        return severity;
    }

    /**
     * Sets the value of the severity property.
     * 
     * @param value
     *     allowed object is
     *     {@link CD }
     *     
     */
    public void setSeverity(CD value) {
        this.severity = value;
    }

}
