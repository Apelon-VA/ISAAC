//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.09.26 at 04:34:25 PM PDT 
//

package org.hl7.cdsdt.r2;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for Compression.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * <p>
 * 
 * <pre>
 * &lt;simpleType name="Compression">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string">
 *     &lt;enumeration value="DF"/>
 *     &lt;enumeration value="GZ"/>
 *     &lt;enumeration value="ZL"/>
 *     &lt;enumeration value="Z"/>
 *     &lt;enumeration value="BZ"/>
 *     &lt;enumeration value="Z7"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "Compression")
@XmlEnum
public enum Compression {

  /**
   * Deflate : The deflate compressed data format as specified in IETF RFC 1951.
   * 
   */
  DF("DF"),

  /**
   * GZIP : A compressed data format that is compatible with the widely used
   * GZIP utility as specified in IETF RFC 1952(uses the deflate algorithm).
   * 
   */
  GZ("GZ"),

  /**
   * ZLIB : A compressed data format that also uses the deflate algorithm.
   * Specified as IETF RFC 1950.
   * 
   */
  ZL("ZL"),

  /**
   * Compress : Original UNIX compress algorithm and file format using the LZC
   * algorithm (a variant of LZW). Patent encumbered and less efficient than
   * deflate.
   * 
   */
  Z("Z"),

  /**
   * BZIP : bzip-2 compression format. See [http://www.bzip.org/] for more
   * information.
   * 
   */
  BZ("BZ"),

  /**
   * Z7 : 7z compression file format. See [http://www.7-zip.org/7z.html] for
   * more information.
   * 
   */
  @XmlEnumValue("Z7")
  Z_7("Z7");
  private final String value;

  Compression(String v) {
    value = v;
  }

  public String value() {
    return value;
  }

  public static Compression fromValue(String v) {
    for (Compression c : Compression.values()) {
      if (c.value.equals(v)) {
        return c;
      }
    }
    throw new IllegalArgumentException(v);
  }

}
